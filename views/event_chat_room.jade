extends layout

block title
    | Event Chat Room
    
block content
    div(class="chat page")
      div(class="logArea")
        h1(class="event_title")
        h3(class="num_people")
        h3(class="host_online")
      div(class="chatArea")
        ul(class="messages")
      input(class="inputMessage", placeholder="Type message here...")

    script(src="https://cdn.socket.io/socket.io-1.3.7.js")
    
block script
    script.
        var this_event = !{JSON.stringify(event)}
        var this_user = !{JSON.stringify(user)}
        $(function() {
          // Constants
          var TYPING_TIMEOUT = 1000 // 1000ms
          // Initialize variables
          var $window = $(window);
          var $messages = $('.messages'); // Messages area   
          var $event_title = $('.event_title')      
          var $num_people_in_room = $('.num_people')
          var $host_online = $('.host_online')
          var $inputMessage = $('.inputMessage'); // Input message input box
          var $chatPage = $('.chat.page'); // The chatroom page
          
          // User Info
          var username;
          var host = false;
          var connected = false;
          var typing = false;
          var last_typing_time;
          
          var $currentInput = $inputMessage.focus();
          
          var socket = io();
          
          //TODO: check if host or attendent or just someone random.
          var host_name = (this_event.host.firstName + ' ' + this_event.host.lastName)
          username = (this_user.firstName + " " + this_user.lastName)
          
          //Add this user to chat.
          socket.emit('add user', {username: username, event_id: this_event._id});
          
          
          // Socket events --------------------------------------------------------------------------------------------------------
          
          // Server emits login
          socket.on('login', function (data) {
            connected = true;
            // Display the welcome message
            var message = "Welcome to The Event Chat";
            $event_title.text(message)
            //log(message);
            console.log(data)
            addParticipantsMessage(data);
            
            if( username == host_name){
              console.log("host")
              host = true;
              $host_online.text("You are the host of this event")
            } else {
              $host_online.text("The host " + host_name + " is offline")
            }
          });
          
          // Whenever the server emits 'new message', update the chat body
          socket.on('new message', function (data) {
            addChatMessage(data);
          });
          
          socket.on('update host', function(data){
            console.log(data.hoster)
            if(username != data.hoster){
              $host_online.text("The host " + data.hoster + " is online")
            }
          });
                    
          // Whenever the server emits 'user joined', log it in the chat body
          socket.on('user joined', function (data) {
            console.log(data)
            if(data.username == (host_name)){ //user joined is host
              $host_online.text("The host " + data.username + " is online")
            }
            
            if (host == true){// you are the host, let others know since they joined.
              socket.emit('host online', host_name)
            }
            
            log('Log Message: ' + data.username + ' joined');
            addParticipantsMessage(data);
          });
          
          // Whenever the server emits 'user left', log it in the chat body
          socket.on('user left', function (data) {
            
            if(data.username == host_name){ //the user who left is the host
              $host_online.text("The host " + data.username + " is offline")
            }
            
            log('Log Message: ' + data.username + ' left');
            addParticipantsMessage(data);
            stopChatTyping(data);
          });
          
          socket.on('start typing', function(data){
            console.log("start typing");
            addChatTyping(data);
          });
          
          socket.on('stop typing', function(data){
            console.log("stop typing");
            stopChatTyping(data);
          });
          
          // End Socket Events --------------------------------------------------------------------------------------------------------
          
          // add Participant number to top.
          function addParticipantsMessage (data) {
            var message = '';
            if (data.numUsers === 1) {
              message += "There is 1 person in this chat room now.";
            } else {
              message += "There are now " + data.numUsers + " people in this chat room.";
            }
            $num_people_in_room.html(message)
          }
          
          // Sends a chat message
          var sendMessage = function() {
            var message = $inputMessage.val();
            // Prevent markup from being injected into the message
            message = cleanInput(message);
            // if there is a non-empty message and a socket connection
            if (message && connected) {
              $inputMessage.val('');
              /*
              addChatMessage({
                username: username,
                message: message
              });
              */
              // tell server to execute 'new message' and send along message
              socket.emit('new message', message);
            }
          }
          
          // Log a message
          function log (message) {
            var $el = $('<li>').addClass('log').text(message);
            addMessageElement($el)
          }
          
          // Adds the visual chat message to the message list
          function addChatMessage (data) {
            //is typing
            var $typingMessage = getTypingMessage(data);
            console.log($typingMessage);
            if($typingMessage.length !== 0){
              $typingMessage.remove();
            }
          
            var $usernameDiv = $('<span class="username"/>')
              .text(data.username)
            var $messageBodyDiv = $('<span class="messageBody">')
              .text(data.message);
              
              
            var typingClass = data.typing ? 'typing' : '';
            var $messageDiv = $('<li class="message"/>')
              .data('username', data.username)
              .addClass(typingClass)
              .append($usernameDiv, ": " ,$messageBodyDiv);
            //console.log($messageDiv)
            
            addMessageElement($messageDiv);
          }
          
          // Adds a message element to the messages
          // el - The element to add as a log/message
          function addMessageElement (el) {
            var $el = $(el);
            //console.log($el)
            $messages.append($el);
            $messages[0].scrollTop = $messages[0].scrollHeight;
          }
          
          // Prevents input from having injected markup
          function cleanInput (input) {
            return $('<div/>').text(input).text();
          }
                  
          // Keyboard events
          
          $window.keydown(function (event) {
            // Auto-focus the current input when a key is typed
            if (!(event.ctrlKey || event.metaKey || event.altKey)) {
              $currentInput.focus();
            }
            // When the client hits ENTER on their keyboard
            if (event.which === 13) {
              if (username) {
                sendMessage();
                socket.emit('stop typing');
                typing = false;
              } else {
                //do nothing
              }
            }
          });
          
          $inputMessage.on('input', function(){
            updateTyping();
          })
          
          function updateTyping(){
            if(connected){
              if(!typing){
                typing = true;
                socket.emit('start typing');
              }
              last_typing_time = (new Date()).getTime()
              
              setTimeout(function () {
                
                var typing_timer = (new Date()).getTime();
                var timeDiff = typing_timer - last_typing_time;
                console.log(timeDiff);
                if (timeDiff >= TYPING_TIMEOUT && typing) {
                  socket.emit('stop typing');
                  typing = false;
                }
              }, TYPING_TIMEOUT);
            }
          }
          
          function addChatTyping(data){
            data.typing = true;
            data.message = 'is typing'
            addChatMessage(data);
          }
          
          function stopChatTyping(data){
            console.log(data)
            getTypingMessage(data).remove();
            console.log("remove chat typing");
          }
          
          function getTypingMessage(data){
            return $('.typing.message').filter(function(i){
              return $(this).data('username') === data.username;
            })
          }
          
          // Focus input when clicking on the message input's border
          $inputMessage.click(function () {
            $inputMessage.focus();
          });
          
        });


        
